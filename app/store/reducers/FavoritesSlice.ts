import type { PayloadAction } from '@reduxjs/toolkit'; // Importing the PayloadAction type from Redux Toolkit for type-safe actions.
import { createSlice } from '@reduxjs/toolkit'; // Importing the createSlice function from Redux Toolkit to create a slice of the Redux state.

type InitialStateType = {
  products: number[]; // An array of product IDs representing favorite items.
  version: number; // A version number to track changes in the favorites list.
};

/**
 * Define the initial state for the favorites slice.
 */
const initialState: InitialStateType = {
  products: [], // Start with an empty list of favorite products.
  version: 0, // Initial version set to 0.
};

/**
 * Create a slice for managing favorite products.
 */
export const favoritesSlice = createSlice({
  name: 'favorites-slice', // Name of the slice.
  initialState, // The initial state defined above.
  reducers: {
    /**
     * add a product to the favorites list.
     */
    addFavorites(state, action: PayloadAction<number>) {
      // Check if the product ID is already in the favorites list.
      const isUnique = state.products.findIndex((productId: number) => {
        return productId === action.payload;
      });
      // If the product ID is not found, add it to the list.
      if (isUnique === -1) {
        state.products.push(action.payload);
      }
    },
    /**
     * remove a product from the favorites list.
     */
    removeFavorites(state, action: PayloadAction<number>) {
      // Filter out the product ID to be removed.
      state.products = state.products.filter(
        (product: number) => product !== action.payload,
      );
    },
    /**
     * remove all products from the favorites list.
     */
    removeAllFavorites(state) {
      state.products = initialState.products; // Reset to initial empty state.
    },
    /**
     * set the version of the favorites list.
     */
    setFavoritesVersion(state, action: PayloadAction<number>) {
      state.version = action.payload; // Update the version number.
    },
  },
});

// Export the actions generated by createSlice for use in dispatching.
export const {
  addFavorites,
  removeFavorites,
  removeAllFavorites,
  setFavoritesVersion,
} = favoritesSlice.actions;

/**
 * Selector to get the list of favorite product IDs.
 *
 * @param state - The global state object.
 * @returns An array of product IDs that are marked as favorites.
 */
export const selectFavoritesItems = (state: {
  favoritesReducer: { products: number[] };
}) => state.favoritesReducer.products;

/**
 * Selector to check if a specific product ID is in the favorites list.
 *
 * @param state - The global state object.
 * @param id - The product ID to check.
 * @returns A boolean indicating whether the product ID is in the favorites list.
 */
export const selectIsFavorites = (
  state: { favoritesReducer: { products: number[] } },
  id: number,
): boolean => {
  const added = state.favoritesReducer.products.findIndex(
    (product: number) => product === id,
  );
  return added !== -1; // Return true if the product ID is found, false otherwise.
};

/**
 * Selector to get the current version of the favorites list.
 *
 * @param state - The global state object.
 * @returns The version number of the favorites list.
 */
export const selectFavoritesVersion = (state: {
  favoritesReducer: { version: number };
}) => state.favoritesReducer.version;

// Export the be used in the store configuration.
export default favoritesSlice.reducer;
