import type { PayloadAction, WritableDraft } from '@reduxjs/toolkit'; // Importing the PayloadAction type from Redux Toolkit for type-safe actions.
import { createSlice } from '@reduxjs/toolkit'; // Importing the createSlice function from Redux Toolkit to create a slice of the Redux state.

/**
 * The initial state for the favorites slice.
 * @property {number[]} products - An array of product IDs representing favorite items.
 * @property {number}   version  - A version number to track changes in the favorites list.
 */
type InitialStateType = {
  products: number[]; // An array of product IDs representing favorite items.
  version: number; // A version number to track changes in the favorites list.
};

/**
 * Define the initial state for the favorites slice.
 * @property {Array}  products - An array of product IDs representing favorite items.
 * @property {number} version  - A version number to track changes in the favorites list.
 */
const initialState: InitialStateType = {
  products: [],
  version: 0,
};

/**
 * Create a slice for managing favorite products.
 * @param name         - Name of the slice.
 * @param initialState - The initial state for the slice.
 * @param reducers     - An object containing the reducer functions for managing the favorites slice.
 */
export const favoritesSlice = createSlice({
  name: 'favorites-slice',
  initialState,
  reducers: {
    /**
     * Add a product to the favorites list.
     * @param {WritableDraft<InitialStateType>} state  - Current state
     * @param {PayloadAction<string>}           action - Payload with product ID
     */
    addFavorites(
      state: WritableDraft<InitialStateType>,
      action: PayloadAction<number>,
    ) {
      /** Check if the product ID is already in the favorites list. */
      const isUnique = state.products.findIndex((productId: number) => {
        return productId === action.payload;
      });
      /** If the product ID is not found, add it to the list. */
      if (isUnique === -1) {
        state.products.push(action.payload);
      }
    },
    /**
     * Remove a product from the favorites list.
     * @param {WritableDraft<InitialStateType>} state  - Current state
     * @param {PayloadAction<string>}           action - Payload with product ID
     */
    removeFavorites(
      state: WritableDraft<InitialStateType>,
      action: PayloadAction<number>,
    ) {
      /** Filter out the product ID to be removed. */
      state.products = state.products.filter(
        (product: number) => product !== action.payload,
      );
    },
    /**
     * Remove all products from the favorites list.
     * @param {WritableDraft<InitialStateType>} state - Current state
     */
    removeAllFavorites(state: WritableDraft<InitialStateType>) {
      state.products = initialState.products; // Reset to initial empty state.
    },
    /**
     * Set the version of the favorites list.
     * @param {WritableDraft<InitialStateType>} state  - Current state
     * @param {PayloadAction<string>}           action - Payload with version number
     */
    setFavoritesVersion(
      state: WritableDraft<InitialStateType>,
      action: PayloadAction<number>,
    ) {
      state.version = action.payload; // Update the version number.
    },
  },
});

/** Export the actions generated by createSlice for use in dispatching. */
export const {
  addFavorites,
  removeFavorites,
  removeAllFavorites,
  setFavoritesVersion,
} = favoritesSlice.actions;

/**
 * Selector to get the list of favorite product IDs.
 * @param   {object}   state                           - The global state object.
 * @param   {object}   state.favoritesReducer          - The favorites reducer slice.
 * @param   {number[]} state.favoritesReducer.products - The array of product IDs that are marked as favorites.
 * @returns {number}                                   An array of product IDs that are marked as favorites.
 */
export const selectFavoritesItems = (state: {
  favoritesReducer: { products: number[] };
}): number[] => state.favoritesReducer.products;

/**
 * Selector to check if a specific product ID is in the favorites list.
 * @param   {object}   state                           - The global state object.
 * @param   {object}   state.favoritesReducer          - The favorites reducer slice.
 * @param   {number[]} state.favoritesReducer.products - The array of product IDs that are marked as favorites.
 * @param   {number}   id                              - The product ID to check.
 * @returns {boolean}                                  A boolean indicating whether the product ID is in the favorites list.
 */
export const selectIsFavorites = (
  state: { favoritesReducer: { products: number[] } },
  id: number,
): boolean => {
  const added = state.favoritesReducer.products.findIndex(
    (product: number) => product === id,
  );
  return added !== -1; // Return true if the product ID is found, false otherwise.
};

/**
 * Selector to get the current version of the favorites list.
 * @param   {object} state                          - The global state object.
 * @param   {object} state.favoritesReducer         - The favorites reducer slice.
 * @param   {number} state.favoritesReducer.version - The version number of the favorites list.
 * @returns {number}                                The version number of the favorites list.
 */
export const selectFavoritesVersion = (state: {
  favoritesReducer: { version: number };
}): number => state.favoritesReducer.version;

/** Export the be used in the store configuration. */
export default favoritesSlice.reducer;
