// Importing necessary types and functions from Redux Toolkit
import type { PayloadAction } from '@reduxjs/toolkit';
import { createSlice } from '@reduxjs/toolkit';
// Importing interfaces for order product data and order form data
import type {
  IOrderProductData,
  IOrdersFormData,
} from 'oneentry/dist/orders/ordersInterfaces';

// Defining the application-specific order type
export type IAppOrder = {
  formIdentifier?: string; // Optional identifier for the form
  paymentAccountIdentifier?: string; // Optional identifier for the payment account
  formData: Array<IOrdersFormData & { valid?: boolean }>; // Array of form data with an optional validity flag
  products: Array<IOrderProductData>; // Array of order product data
};

// Defining the shape of the initial state for the order slice
type InitialStateType = {
  // The current order
  order: IAppOrder;
  // Optional currency type for the order
  currency?: string;
  // Optional array of payment methods
  paymentMethods?: Array<{
    // Identifier for each payment method
    identifier: string;
  }>;
};

// Initial state setup for the order slice
const initialState: InitialStateType = {
  order: {
    // Initialize empty array for form data
    formData: [],
    // Initialize empty array for products
    products: [],
  },
};

// Creating a Redux slice for order management
const orderReducer = createSlice({
  initialState, // Initial state defined above
  name: 'order', // Name of the slice
  reducers: {
    // create or update an order
    create(state, action: PayloadAction<IAppOrder>) {
      if (!state.order) {
        state.order = action.payload; // If no order exists, set the new order
      } else {
        state.order = {
          ...action.payload, // Merge the new order data with the existing order
          ...state.order,
        };
      }
    },
    // remove an order by resetting it to its initial state
    remove(state) {
      state.order = {
        formData: [], // Reset form data
        products: [], // Reset products
      };
    },
    // add or update form data in the order
    addData(
      state,
      action: PayloadAction<IOrdersFormData & { valid?: boolean }>,
    ) {
      if (!state.order) {
        return; // If no order exists, do nothing
      }
      const ind = state.order.formData.findIndex(
        (item) => item.marker === action.payload.marker,
      );

      if (ind !== -1) {
        state.order.formData[ind] = action.payload; // Update existing form data
      } else {
        state.order.formData.push(action.payload); // Add new form data
      }
    },
    // add products to the order
    addProducts(state, action: PayloadAction<IOrderProductData[]>) {
      if (!state.order) {
        return; // If no order exists, do nothing
      }
      state.order.products = action.payload; // Set the products in the order
    },
    // add payment methods to the order
    addPaymentMethods(
      state,
      action: PayloadAction<
        Array<{
          identifier: string;
        }>
      >,
    ) {
      if (!state.paymentMethods) {
        state.paymentMethods = action.payload; // Set the payment methods if they don't exist
      }
    },
    // set the payment account identifier for the order
    addPaymentMethod(state, action: PayloadAction<string>) {
      if (!state.order) {
        return; // If no order exists, do nothing
      }
      state.order.paymentAccountIdentifier = action.payload; // Set the payment account identifier
    },
    // set the currency for the order
    addOrderCurrency(state, action: PayloadAction<string>) {
      if (!state.order) {
        return; // If no order exists, do nothing
      }
      state.currency = action.payload; // Set the currency
    },
  },
});

// Exporting actions generated by createSlice
export const {
  remove: removeOrder, // Action to remove an order
  create: createOrder, // Action to create an order
  addData, // Action to add or update form data
  addProducts, // Action to add products
  addPaymentMethods, // Action to add payment methods
  addPaymentMethod, // Action to set payment account identifier
  addOrderCurrency, // Action to set currency
} = orderReducer.actions;

// Exporting the reducer generated by createSlice
export default orderReducer.reducer;
